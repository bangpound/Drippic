<?php

function drippic_init(){
	global $user;

	// If the user is neither anonymous nor super user, log the user out.
	if($user->uid != 1 && $user->uid != 0){
  	watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

  	// Destroy the current session:
  	session_destroy();
  	// Only variables can be passed by reference workaround.
  	$null = NULL;
  	user_module_invoke('logout', $null, $user);

  	// Load the anonymous user
  	$user = drupal_anonymous_user();
	}
}
/*
 * Implementiation of hook_menu()
 */
function drippic_menu(){	
  $items = array();

  $items['drippic/upload'] = array(
    'title' => 'Upload',
    'page callback' => 'drippic_upload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function drippic_upload($function = null){
  global $base_url;

	$username = $_POST['username'];
	$password = $_POST['password'];
	$source = $_POST['source'];
	$tweet = $_POST['message'];
	$media = $_FILES['media'];
	
	$output = '<?xml version="1.0" encoding="UTF-8"?>';

	$response = array(
		'key' => 'rsp',
	);

	if(isset($username) && isset($password) && isset($tweet) && isset($media)){
  	$account = drippic_load_twitter_user($username,$password);
		//if(!$account){
		//	$output .= '<rsp stat="fail">';
		//	$output .= '<error>Invalid username and password.</error>';
		//	$output .= '</rsp>';
		//}
		//else{
			$nid = drippic_create_node($tweet ,$media);
			if(isset($nid)){
				if($function == 'tweet'){
				  $url = drippic_tinyurl('node/' . $nid);
					$post = $tweet . ' ' . $url;
					while(strlen($post) > 140){
						$tweet = substr($tweet, 0, -4);
						$post = $tweet . '... ' . $url;
					}
					$data = drippic_twitter_tweet($username,$password,$post);	
				}

				$response['attributes'] = array(
					'stat' => 'ok',
				);
				$response['value'] = array(
					'mediaid' => $nid,
					'mediaurl' => drippic_tinyurl('node/' . $nid),
				);
			}
			else{
				$response['attributes'] = array(
					'stat' => 'fail',
				);
				$response['value'] = array(
					'error' => 'No nid returned',
				);
			}
		//}
	}
	else{
		$response['attributes'] = array(
			'stat' => 'fail',
		);
		$response['value'] = array(
			'error' => 'Make sure username, password, message and media vars are sent.',
		);
	}
	$output .= format_xml_elements(array($response));
	
	header ("Content-Type:text/xml");  
	print $output;
}


function drippic_create_node($tweet, $media) {
	global $user;
  $node = new stdClass;
  $node->status = 1;
  $node->type = 'pic';
  $node->title = $tweet;

  
	$target_path = file_directory_path();
	$target_path = $target_path . '/' . basename($media['name']); 
	if(move_uploaded_file($media['tmp_name'], $target_path)) {
	    watchdog('drippic', "The file uploaded ok");
	} else{
	    watchdog('drippic',"There was an error uploading the file, please try again!");
	}
	
  
  $file = drippic_imagefield_load('field_pic', 'pic', $target_path, $user);
  $node->field_pic[0] = $file;


  // Save node
  module_load_include('inc', 'node', 'node.pages');
  node_object_prepare($node);
  $node->form_id = $node->type . '_node_form';

  // pretend we're saving the node from a node form to please modules like filefield_paths
  $node = node_submit($node);
  $node->uid = $user->uid;
  node_save($node);

	return $node->nid;
}

function drippic_imagefield_load($field_name, $ctype_name, $full_file_path, $account) {
    $field = content_fields($field_name, $ctype_name);
    $validators = filefield_widget_upload_validators($field);

    // make sure that the directory exists
    $directory = filefield_widget_file_path($field);
    field_file_check_directory($directory, FILE_CREATE_DIRECTORY);

    // move the file
    if ($file = field_file_save_file($full_file_path, $validators, $directory, $account)) {
      return $file;
    }
    else {
      return FALSE;
    }
}

function drippic_load_twitter_user($username,$password){
	$twitter_user = drippic_verify_twitter_user($username,$password);
	if($twitter_user->screen_name != $username){
		return false;
	}
	
	$account = user_load(array('name' => $username));
	if($account->name == $username){
		user_save($account,array('twitter'=>$twitter_user));
    $form_values = array();
	  $form_values["name"] = $username;
	  $form_values["pass"] = $password;
	  $form_values["op"] = "Log in";
    return user_authenticate($form_values);
	}
	else{
		$name = $username;
		$pass = md5($password);
    $now = time();
		db_query("INSERT INTO {users} (name, pass, status, created, access) VALUES ('%s', '%s', %d, %d, %d)", $name, $pass, 1, $now, $now);
    $account = user_load(array('name' => $username));

		user_save($account,array('twitter'=>$twitter_user));
    $form_values = array();
	  $form_values["name"] = $username;
	  $form_values["pass"] = $password;
	  $form_values["op"] = "Log in";
    return user_authenticate($form_values);
	}
}

function drippic_form_alter(&$form, &$form_state, $form_id){
	if($form_id == 'comment_form'){
		$form['twitter_username'] = array(
		  '#type' => 'textfield',
		  '#title' => t('Twitter Username'),
		  '#size' => 25,
		  '#maxlength' => 64,
			'#weight' => -2,			
		  '#required' => TRUE,
		);
		$form['twitter_password'] = array(
		  '#type' => 'password',
		  '#title' => t('Twitter Password'),
		  '#size' => 25,
		  '#maxlength' => 64,
		  '#description' => t('We do not store your password, it is just to authenticate with Twitter.'),
			'#weight' => -1,
		  '#required' => TRUE,
		);
		$form['#validate'][] = 'drippic_comment_form_validate';
		$form['#submit'][] = 'drippic_comment_form_submit';
	}
}

function drippic_comment_form_validate($form, &$form_state) {
	
	$twitter_username = $form_state['values']['twitter_username'];
	$twitter_password = $form_state['values']['twitter_password'];
	$account = drippic_load_twitter_user($twitter_username,$twitter_password);
	$form_state['values']['uid'] = $account->uid;
	if($account->name != $twitter_username){
		form_set_error('twitter_username', t('You must enter a valid Twitter Username.'));
		form_set_error('twitter_password', t('You must enter a valid Twitter Password.'));
	}
}

function drippic_comment_form_submit($form, &$form_state) {
	global $base_url;
	$twitter_username = $form_state['values']['twitter_username'];
	$twitter_password = $form_state['values']['twitter_password'];
	$tweet = $form_state['values']['comment'];
	$node = node_load($form_state['values']['nid']);
	$url = drippic_tinyurl('node/'. $form_state['values']['nid']);
	$post = '@' . $node->name . ' ' . $tweet . ' ' . $url;
	while(strlen($post) > 140){
		$tweet = substr($tweet, 0, -4);
		$post = '@' . $node->name . $tweet . '... ' . $url;
	}
	$data = drippic_twitter_tweet($twitter_username,$twitter_password,$post);
}

function drippic_verify_twitter_user($username,$password){
	$result = drupal_http_request('https://' . $username . ':' . $password . '@api.twitter.com/1/account/verify_credentials.json');
	$data = json_decode($result->data);
	return $data;
}

function drippic_twitter_tweet($username,$password, $tweet){
	$result = drupal_http_request('https://' . $username . ':' . $password . '@api.twitter.com/1/statuses/update.json',array(),'POST','status=' . $tweet);
	$data = json_decode($result->data);
	return $data;
}

function drippic_tinyurl($url){
		$result = file_get_contents("http://tinyurl.com/api-create.php?url=" . url($url, array('absolute' => TRUE)));
		return $result;
}
?>
